const Markdown = require('react-markdown/with-html');
export default () => {
  return <Markdown
    source={`
  # 历史
  2012年高二，在godaddy买过xiaozhaoqi.com和搭载WordPress的虚拟主机，只租了1年，因为拖拉拽生成页面后发现也做不了什么。  
  2017年大三，实习开通了博客园，写Web开发的学习记录。  
  2018年大四，用Github Pages搭建了Hexo的静态博客，但绝大多数时间用来改主题了，比如插入背景音乐、视频、访问统计、评论系统等等。  
  2018年下半年工作之余，用前端技术重新搭建了静态博客，包括用户端如何编辑和提交文章，Git后台如何组织资源，PC和移动端的可访问性等等这些，都是从零开始实现的。  
  # 原理
  + 传统的技术博客平台如博客园，CSDN这些，属于非静态博客，用户在博客管理后台在线编辑文章，提交到平台的审核部门，审核后平台再将文章放到作者的个人博客列表里。流程比较长，自由度低，适合SEO，容易被国内同行发现。  
  + Hexo类似的技术，属于静态博客。相当于把博客打包成HTML+CSS+JAVASCRIPT的资源集合，随便你发布到哪里都可以，在本地使用Git管理文章。Github Pages、Heroku、Coding Pages等很多平台有免费的站点托管服务，国外的几乎不审核，自由度高，访问慢。国内相反。特殊的是百度不收录github.com，因此不容易被国内其他用户访问到。  
  
  因此，我的静态博客也是托管到Github Pages，只不过生成文章和管理文章的方式与Hexo不同。  
  使用Hexo编辑文章，需要在本地编辑器写好，编译成静态文件，然后在Git提交，最后推送到静态页托管站点。  
  这种方式依赖命令行，其实可以看作每次发布文章，都要来一遍“Web部署”。想不去重复部署，那就得回到博客园这种有服务端的系统。让服务端去更新文章，客户端只要轮询Get操作就可以。  
  对于简单个人博客，何必去写Restful接口呢？文件系统就可以满足需求，把文章和图片当做文件资源，用Git管理就可以了。  
  第三方API最友好的就是Github，通过v3 API，可以实现自动化的向任意仓库提交任意文件。前提是有Token。  
  暴露Token并不危险，很多第三方的Github客户端和VS Code插件都会索要你的私有Token，你只要设置好Token的权限范围即可。  
  所以这个站点的Token权限是可以增删改任意仓库的任意代码的，不过没关系，恶意操作是可以回滚的，而且开源的仓库就算被恶意攻击，也没什么损失。  
  首先，基于React编写博客的单页面应用，包括一个Markdown所见即所得的编辑器，在提交的时候使用Github v3 API调用向仓库写文件的接口，将文章存到仓库目录中，最好分字段并编码存储，比如像JSON一样存title, content, timestamp这几个字段，后面读取的时候解析更方便。注意文件命名要唯一，我加了时间戳。  
  显示文章列表的时候同样调用读仓库文件的接口，然后将Markdown字符串解析成HTML显示。涉及到文章显示顺序，这时候按timestamp字段排序就好了。等将来文章多了，还要做分页读取，这里就类似于数据库分表，在存储时就把文章按月份目录存。  
  任何资源都可以当做文件，存入Github仓库。比如图片，我在移动端开发了一个相册功能，就是把照片转成base64再存为文件的。不过普通写文件接口只能写1MB的内容，另外base64也只适合对小图片转码，图片越大转码后的体积反而更大，倒不如直接存二进制文件。  
  暂时就这些，还在折腾中。  
  
  
  
  
  
  `}
    escapeHtml={false}
  />;
};
